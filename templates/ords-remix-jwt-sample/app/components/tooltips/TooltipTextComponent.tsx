/*
**
** Copyright (c) 2024, Oracle and/or its affiliates.
** All rights reserved
** Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/
*/
/**
 * Disabling the react/jsx-props-no-spreading rule for the bindPopover component since we
 * do need to spread the whole props of generated by the bindPopover function and
 * for this specific use case there is no point in spreading them manually.
 */
/* eslint-disable react/jsx-props-no-spreading */
import type { ReactElement } from 'react';
import {
  Typography,
  PopoverOrigin,
  Card,
  CardContent,
} from '@mui/material';
import PopupState, { bindPopover, bindHover } from 'material-ui-popup-state';
import HoverPopover from 'material-ui-popup-state/HoverPopover';
import { Ords } from '../icons';
import ORDSFeature from '../../models/ORDSFeature';

interface ToolTipProps {
  anchorText : string;
  featureProps : ORDSFeature
  children ?: ReactElement | undefined;
  popoverAnchorOrigin ?: PopoverOrigin | undefined;
  popoverTransformOrigin ?: PopoverOrigin | undefined;
}

/**
 * Provides a tooltip component.
 * Uses an anchor element as reference.
 * @see {@link https://mui.com/material-ui/react-popover/} for more info.
 * @param props the expected tooltips properties.
 * @returns the Requested ToolTip component.
 */
function TooltipTextComponent(props : ToolTipProps) {
  const {
    anchorText, featureProps, children, popoverAnchorOrigin, popoverTransformOrigin,
  } = props;
  const {
    featureID, title, description, link,
  } = featureProps;
  return (
    <PopupState variant="popover" popupId={featureID}>
      {
        (popupState) => (
          <>
            <Typography
              variant="body2"
              color="text.secondary"
              display="inline"
              {...bindHover(popupState)}
              sx={{ fontWeight: 'bold' }}
            >
              {anchorText}
            </Typography>
            <HoverPopover
              {...bindPopover(popupState)}
              anchorOrigin={popoverAnchorOrigin !== undefined
                ? popoverAnchorOrigin : {
                  vertical: 'bottom',
                  horizontal: 'center',
                }}
              transformOrigin={popoverTransformOrigin !== undefined ? popoverTransformOrigin
                : {
                  vertical: 'top',
                  horizontal: 'left',
                }}
              sx={{
                maxWidth: '150ch',
                minWidth: '80ch',
              }}
            >
              <Card sx={{
                maxWidth: '120ch',
                minWidth: '80ch',
              }}
              >
                <CardContent>
                  {
                    children === undefined ? (
                      <div className="flex flex-row">
                        <div className="w-32 flex-none content-center px-2">
                          <Ords />
                        </div>
                        <div className="flex-col">
                          <Typography gutterBottom variant="h5" component="div">
                            {title}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            {description}
                            {' '}
                            <a
                              className="text-blue-600 underline hover:text-blue-800"
                              target="_blank"
                              href={link}
                              rel="noreferrer"
                            >
                              Learn more.
                            </a>
                            {' '}
                          </Typography>
                        </div>
                      </div>
                    )
                      : children
                  }
                </CardContent>
              </Card>
            </HoverPopover>
          </>
        )
      }
    </PopupState>

  );
}

export default TooltipTextComponent;
