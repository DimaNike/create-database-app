-- Copyright (c) 2024, Oracle and/or its affiliates.
-- All rights reserved
-- Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/

-- Generated by ORDS REST Data Services 24.2.3.r2011847
-- Schema: CONCERT_SAMPLE_APP  Date: Tue Aug 27 05:26:44 2024 
--

DECLARE
  l_roles     OWA.VC_ARR;
  l_modules   OWA.VC_ARR;
  l_patterns  OWA.VC_ARR;

BEGIN
  ORDS.ENABLE_SCHEMA(
      p_enabled             => TRUE,
      p_schema              => 'CONCERT_SAMPLE_APP',
      p_url_mapping_type    => 'BASE_PATH',
      p_url_mapping_pattern => 'concert_sample_app',
      p_auto_rest_auth      => FALSE);
    
  ORDS.DEFINE_MODULE(
      p_module_name    => 'concert_app.euser.v1',
      p_base_path      => '/euser/v1/',
      p_items_per_page => 0,
      p_status         => 'PUBLISHED',
      p_comments       => 'end user APIs Version 1');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'artists/',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'Artist resource for end users');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'artists/',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT
      A.ARTIST_ID,
      A.NAME,
      A.DESCRIPTION,
      LISTAGG(MG.NAME, '', '') WITHIN GROUP(
      ORDER BY
          MG.NAME
      ) AS MUSIC_GENRES
    FROM
      ARTISTS A
      LEFT JOIN ARTIST_CLASSIFICATIONS AA ON A.ARTIST_ID = AA.ARTIST_ID
      LEFT JOIN MUSIC_GENRES           MG ON AA.MUSIC_GENRE_ID = MG.MUSIC_GENRE_ID
    GROUP BY
      A.ARTIST_ID,
      A.NAME,
      A.DESCRIPTION
    ORDER BY
      A.NAME');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'artist/:id',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'Artist resource for end users');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'artist/:id',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT
      A.ARTIST_ID,
      A.NAME,
      A.DESCRIPTION,
      A.BIO,
      LISTAGG(MG.NAME, '', '') WITHIN GROUP( 
      ORDER BY
          MG.NAME
      ) AS MUSIC_GENRES
    FROM
      ARTISTS A
      LEFT JOIN ARTIST_CLASSIFICATIONS AA ON A.ARTIST_ID = AA.ARTIST_ID
      LEFT JOIN MUSIC_GENRES           MG ON AA.MUSIC_GENRE_ID = MG.MUSIC_GENRE_ID
    WHERE A.ARTIST_ID = :id
    GROUP BY
      A.ARTIST_ID,
      A.NAME,
      A.DESCRIPTION,
      A.BIO
    ORDER BY
      A.NAME');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'artists/:artist_name',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'Artist resource for end users');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'artists/:artist_name',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT * FROM ARTISTS 
      WHERE NAME LIKE ''%'' || :artist_name || ''%''');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'venues/',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'Artist resource for end users');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'venues/',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT * FROM VENUES ORDER BY NAME DESC');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'venues/:venue_name',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'Artist resource for end users');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'venues/:venue_name',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT * FROM VENUES
    WHERE NAME LIKE ''%'' || :venue_name || ''%''');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'cities/',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'Cities resource for end users');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'cities/',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT C.CITY_ID, C.NAME, C.DESCRIPTION, COUNT(E.EVENT_ID) AS EVENT_COUNT
      FROM CITIES C
      LEFT JOIN VENUES V ON C.CITY_ID = V.CITY_ID
      LEFT JOIN EVENTS E ON V.VENUE_ID = E.VENUE_ID
      GROUP BY C.CITY_ID, C.NAME, C.DESCRIPTION
      ORDER BY EVENT_COUNT DESC');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'venues_by_city/:city_name',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'Artist resource for end users');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'venues_by_city/:city_name',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT V.* 
      FROM VENUES V JOIN CITIES C 
      ON V.CITY_ID = C.CITY_ID
      WHERE C.CITY_NAME = :CITY_NAME
            ');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'venue/:venue_id',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'Artist resource for end users');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'venue/:venue_id',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT * FROM VENUES WHERE VENUE_ID = :VENUE_ID');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'events/',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'Artist resource for end users');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'events/',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT * FROM EVENTS');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'events/:event_name',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'Events for the homepage');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'events/:event_name',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT * FROM EVENTS_VIEW 
    WHERE ARTIST_NAME LIKE ''%'' || :event_name || ''%''
    ORDER BY EVENT_DATE ASC');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'event/:event_id',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'Artist resource for end users');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'event/:event_id',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT * FROM EVENTS_VIEW WHERE EVENT_ID = :event_id');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'landing_page_global_stats/',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'Banner stats for end users.');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'landing_page_global_stats/',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT * FROM BANNER_VIEW');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'eventsHome/',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'Events for the homepage');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'eventsHome/',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT * FROM EVENTS_VIEW ORDER BY EVENT_DATE ASC');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'artistEvents/:id',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'Events for a particular Artist.');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'artistEvents/:id',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT * FROM EVENTS_VIEW WHERE ARTIST_ID = :id ORDER BY EVENT_DATE ASC');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'cityEvents/:cityName',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'Events for a particular City.');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'cityEvents/:cityName',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT * FROM EVENTS_VIEW WHERE CITY_NAME=:cityName  ORDER BY EVENT_DATE ASC');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'eventStatus/',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'Event status resource for end users');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'eventStatus/',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT * FROM EVENT_STATUS');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'musicGenres/',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => ' music genres resource for end users');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.euser.v1',
      p_pattern        => 'musicGenres/',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT * FROM MUSIC_GENRES');

  ORDS.DEFINE_MODULE(
      p_module_name    => 'concert_app.authuser.v1',
      p_base_path      => '/authuser/v1/',
      p_items_per_page => 0,
      p_status         => 'PUBLISHED',
      p_comments       => 'authenticated user APIs Version 1');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.authuser.v1',
      p_pattern        => 'events/',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'events resource for authenticated users');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.authuser.v1',
      p_pattern        => 'events/',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT 
        a.name AS ARTIST_NAME,
        e.event_id AS EVENT_ID,
        e.event_date AS EVENT_DATE,
        e.event_details AS EVENT_DETAILS,
        es.event_status_name as EVENT_STATUS_NAME,
        es.event_status_id AS EVENT_STATUS_ID,
        v.venue_id AS VENUE_ID,
        v.name AS VENUE_NAME
    FROM 
        events e
        INNER JOIN artists a ON e.artist_id = a.artist_id
        INNER JOIN event_status es ON e.event_status_id = es.event_status_id
        INNER JOIN venues v ON e.venue_id = v.venue_id
        ORDER BY e.event_date DESC');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.authuser.v1',
      p_pattern        => 'event/:event_id',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'event resource for authenticated users');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.authuser.v1',
      p_pattern        => 'event/:event_id',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT 
        a.name AS ARTIST_NAME,
        e.event_id AS EVENT_ID,
        e.event_date AS EVENT_DATE,
        e.event_details AS EVENT_DETAILS,
        es.event_status_name as EVENT_STATUS_NAME,
        es.event_status_id AS EVENT_STATUS_ID,
        v.venue_id AS VENUE_ID,
        v.name AS VENUE_NAME
    FROM 
        events e
        INNER JOIN artists a ON e.artist_id = a.artist_id
        INNER JOIN event_status es ON e.event_status_id = es.event_status_id
        INNER JOIN venues v ON e.venue_id = v.venue_id
        WHERE e.event_id = :event_id');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.authuser.v1',
      p_pattern        => 'liked_artists/:user_id',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'Liked artist of user');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.authuser.v1',
      p_pattern        => 'liked_artists/:user_id',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT A.* FROM ARTISTS A 
        JOIN LIKED_ARTIST L_A 
        ON A.ARTIST_ID = L_A.ARTIST_ID
        WHERE L_A.USER_ID = :user_id');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.authuser.v1',
      p_pattern        => 'liked_artist/:user_id/:artist_id',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'Check if user liked an artist');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.authuser.v1',
      p_pattern        => 'liked_artist/:user_id/:artist_id',
      p_method         => 'GET',
      p_source_type    => 'json/item',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT COUNT(1) as likedArtist FROM LIKED_ARTIST 
        WHERE USER_ID = :user_id AND ARTIST_ID = :artist_id');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.authuser.v1',
      p_pattern        => 'liked_venues/:user_id',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'Liked venues of user');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.authuser.v1',
      p_pattern        => 'liked_venues/:user_id',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT V.* FROM VENUE V 
        JOIN LIKED_VENUE L_V 
        ON V.ID = L_V.VENUE_ID
        WHERE L_V.USER_ID = :user_id');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.authuser.v1',
      p_pattern        => 'liked_venue/:user_id/:venue_id',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'Check if user liked a venue');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.authuser.v1',
      p_pattern        => 'liked_venue/:user_id/:venue_id',
      p_method         => 'GET',
      p_source_type    => 'json/item',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT COUNT(1) as likedVenue FROM LIKED_VENUE 
        WHERE USER_ID = :user_id AND VENUE_ID = :venue_id');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.authuser.v1',
      p_pattern        => 'liked_events/:user_id',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'Liked events of user');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.authuser.v1',
      p_pattern        => 'liked_events/:user_id',
      p_method         => 'GET',
      p_source_type    => 'json/collection',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT E.* FROM EVENTS E 
        JOIN LIKED_EVENT L_E 
        ON E.EVENT_ID = L_E.EVENT_ID
        WHERE L_E.USER_ID = :user_id');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.authuser.v1',
      p_pattern        => 'liked_event/:user_id/:event_id',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'Check if user liked an event');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.authuser.v1',
      p_pattern        => 'liked_event/:user_id/:event_id',
      p_method         => 'GET',
      p_source_type    => 'json/item',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'SELECT COUNT(1) as likedEvent FROM LIKED_EVENT 
        WHERE USER_ID = :user_id AND EVENT_ID = :event_id');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.authuser.v1',
      p_pattern        => 'liked_artist',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'add an entry to the liked artist table');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.authuser.v1',
      p_pattern        => 'liked_artist',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'BEGIN
      INSERT INTO LIKED_ARTIST(ARTIST_ID, USER_ID)
      VALUES (:ARTIST_ID, :USER_ID);
      :status_code := 201;
      :pv_result := ''ARTIST LIKED SUCCESSFULLY'';
      :pn_status := ''SUCCESS'';
      EXCEPTION 
      WHEN OTHERS THEN 
      :status_code := 400;
      :pv_result := ''UNABLE TO LIKE ARTIST'';
      :pn_status := ''ERROR'';
    END;
        ');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.authuser.v1',
      p_pattern            => 'liked_artist',
      p_method             => 'POST',
      p_name               => 'STATUS_CODE',
      p_bind_variable_name => 'pn_status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response status');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.authuser.v1',
      p_pattern            => 'liked_artist',
      p_method             => 'POST',
      p_name               => 'RESULT_MESSAGE',
      p_bind_variable_name => 'pv_result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response message');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.authuser.v1',
      p_pattern            => 'liked_artist',
      p_method             => 'POST',
      p_name               => 'ARTIST_ID ',
      p_bind_variable_name => 'artist_id',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'IN',
      p_comments           => 'id of artists');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.authuser.v1',
      p_pattern            => 'liked_artist',
      p_method             => 'POST',
      p_name               => 'USER_ID ',
      p_bind_variable_name => 'user_id',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => 'user id, provided by auth0');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.authuser.v1',
      p_pattern        => 'liked_artist',
      p_method         => 'DELETE',
      p_source_type    => 'plsql/block',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'BEGIN
      DELETE FROM LIKED_ARTIST
      WHERE ARTIST_ID = :ARTIST_ID AND USER_ID = :USER_ID;
      IF SQL%ROWCOUNT = 0 THEN
          :status_code := 404;
          :pv_result := ''Invalid user_id or artist_id number'';
          :pn_status := ''NO_MATCH'';
      ELSE
          :status_code := 200;
          :pv_result := ''UNLIKED ARTIST SUCCESSFULLY'';
          :pn_status := ''SUCCESS'';
      END IF;
      EXCEPTION 
      WHEN OTHERS THEN 
          :status_code := 400;
          :pv_result := ''UNABLE TO UNLIKE '';
          :pn_status := ''ERROR'';
        END;
        ');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.authuser.v1',
      p_pattern            => 'liked_artist',
      p_method             => 'DELETE',
      p_name               => 'STATUS_CODE',
      p_bind_variable_name => 'pn_status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response status');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.authuser.v1',
      p_pattern            => 'liked_artist',
      p_method             => 'DELETE',
      p_name               => 'RESULT_MESSAGE',
      p_bind_variable_name => 'pv_result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response message');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.authuser.v1',
      p_pattern            => 'liked_artist',
      p_method             => 'DELETE',
      p_name               => 'ARTIST_ID ',
      p_bind_variable_name => 'artist_id',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'IN',
      p_comments           => 'id of artists');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.authuser.v1',
      p_pattern            => 'liked_artist',
      p_method             => 'DELETE',
      p_name               => 'USER_ID ',
      p_bind_variable_name => 'user_id',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => 'user id, provided by auth0');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.authuser.v1',
      p_pattern        => 'liked_venue',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'add an entry to the liked venue table');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.authuser.v1',
      p_pattern        => 'liked_venue',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'BEGIN
      INSERT INTO LIKED_VENUE(VENUE_ID, USER_ID)
      VALUES (:VENUE_ID, :USER_ID);
      :status_code := 201;
      :pv_result := ''VENUE LIKED SUCCESSFULLY'';
      :pn_status := ''SUCCESS'';
      EXCEPTION 
      WHEN OTHERS THEN 
      :status_code := 400;
      :pv_result := ''UNABLE TO LIKE VENUE'';
      :pn_status := ''ERROR'';
    END;
        ');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.authuser.v1',
      p_pattern            => 'liked_venue',
      p_method             => 'POST',
      p_name               => 'STATUS_CODE',
      p_bind_variable_name => 'pn_status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response status');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.authuser.v1',
      p_pattern            => 'liked_venue',
      p_method             => 'POST',
      p_name               => 'RESULT_MESSAGE',
      p_bind_variable_name => 'pv_result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response message');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.authuser.v1',
      p_pattern            => 'liked_venue',
      p_method             => 'POST',
      p_name               => 'VENUE_ID ',
      p_bind_variable_name => 'venue_id',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'IN',
      p_comments           => 'id of artists');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.authuser.v1',
      p_pattern            => 'liked_venue',
      p_method             => 'POST',
      p_name               => 'USER_ID ',
      p_bind_variable_name => 'user_id',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => 'user id, provided by auth0');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.authuser.v1',
      p_pattern        => 'liked_venue',
      p_method         => 'DELETE',
      p_source_type    => 'json/collection',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'BEGIN
      DELETE FROM LIKED_VENUE 
      WHERE VENUE_ID = :VENUE_ID AND USER_ID = :USER_ID;
      IF SQL%ROWCOUNT = 0 THEN
          :status_code := 404;
          :pv_result := ''Invalid user_id or venue_id number'';
          :pn_status := ''NO_MATCH'';
      ELSE
          :status_code := 200;
          :pv_result := ''UNLIKED VENUE SUCCESSFULLY'';
          :pn_status := ''SUCCESS'';
      END IF;
      EXCEPTION 
      WHEN OTHERS THEN 
      :status_code := 400;
      :PN_RESULT := ''UNABLE TO UNLIKE VENUE'';
      :pn_status := ''ERROR'';
    END;
        ');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.authuser.v1',
      p_pattern            => 'liked_venue',
      p_method             => 'DELETE',
      p_name               => 'STATUS_CODE',
      p_bind_variable_name => 'pn_status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response status');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.authuser.v1',
      p_pattern            => 'liked_venue',
      p_method             => 'DELETE',
      p_name               => 'RESULT_MESSAGE',
      p_bind_variable_name => 'pv_result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response message');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.authuser.v1',
      p_pattern            => 'liked_venue',
      p_method             => 'DELETE',
      p_name               => 'VENUE_ID ',
      p_bind_variable_name => 'venue_id',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'IN',
      p_comments           => 'id of artists');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.authuser.v1',
      p_pattern            => 'liked_venue',
      p_method             => 'DELETE',
      p_name               => 'USER_ID ',
      p_bind_variable_name => 'user_id',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => 'user id, provided by auth0');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.authuser.v1',
      p_pattern        => 'liked_event',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'add an entry to the liked event table');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.authuser.v1',
      p_pattern        => 'liked_event',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'BEGIN
      INSERT INTO LIKED_EVENT(EVENT_ID, USER_ID)
      VALUES (:EVENT_ID, :USER_ID);
      :status_code := 201;
      :pv_result := ''EVENT LIKED SUCCESSFULLY'';
      :pn_status := ''SUCCESS'';
      EXCEPTION 
      WHEN OTHERS THEN 
          :status_code := 400;
          :pv_result := ''UNABLE TO LIKE EVENT.'';
          :pn_status := ''ERROR'';
    END;
        ');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.authuser.v1',
      p_pattern            => 'liked_event',
      p_method             => 'POST',
      p_name               => 'STATUS_CODE',
      p_bind_variable_name => 'pn_status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response status');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.authuser.v1',
      p_pattern            => 'liked_event',
      p_method             => 'POST',
      p_name               => 'RESULT_MESSAGE',
      p_bind_variable_name => 'pv_result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response message');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.authuser.v1',
      p_pattern            => 'liked_event',
      p_method             => 'POST',
      p_name               => 'VENUE_ID ',
      p_bind_variable_name => 'event_id',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'IN',
      p_comments           => 'id of artists');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.authuser.v1',
      p_pattern            => 'liked_event',
      p_method             => 'POST',
      p_name               => 'USER_ID ',
      p_bind_variable_name => 'user_id',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => 'user id, provided by auth0');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.authuser.v1',
      p_pattern        => 'liked_event',
      p_method         => 'DELETE',
      p_source_type    => 'plsql/block',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'BEGIN
      DELETE FROM LIKED_EVENT 
      WHERE EVENT_ID = :EVENT_ID AND USER_ID = :USER_ID;
      IF SQL%ROWCOUNT = 0 THEN
          :status_code := 404;
          :pv_result := ''Invalid user_id or event_id number'';
          :pn_status := ''NO_MATCH'';
      ELSE
          :status_code := 200;
          :pv_result := ''UNLIKED EVENT SUCCESSFULLY'';
          :pn_status := ''SUCCESS'';
      END IF;
      EXCEPTION 
      WHEN OTHERS THEN 
          :status_code := 400;
          :pv_result := ''UNABLE TO UNLIKE EVENT'';
          :pn_status := ''ERROR'';
        END;
        ');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.authuser.v1',
      p_pattern            => 'liked_event',
      p_method             => 'DELETE',
      p_name               => 'STATUS_CODE',
      p_bind_variable_name => 'pn_status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response status');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.authuser.v1',
      p_pattern            => 'liked_event',
      p_method             => 'DELETE',
      p_name               => 'RESULT_MESSAGE',
      p_bind_variable_name => 'pv_result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response message');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.authuser.v1',
      p_pattern            => 'liked_event',
      p_method             => 'DELETE',
      p_name               => 'VENUE_ID ',
      p_bind_variable_name => 'event_id',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'IN',
      p_comments           => 'id of artists');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.authuser.v1',
      p_pattern            => 'liked_event',
      p_method             => 'DELETE',
      p_name               => 'USER_ID ',
      p_bind_variable_name => 'user_id',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => 'user id, provided by auth0');

  ORDS.DEFINE_MODULE(
      p_module_name    => 'concert_app.adminuser.v1',
      p_base_path      => '/adminuser/v1/',
      p_items_per_page => 0,
      p_status         => 'PUBLISHED',
      p_comments       => 'admin user APIs Version 1');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.adminuser.v1',
      p_pattern        => 'artists',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'Artists resource for admins');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.adminuser.v1',
      p_pattern        => 'artists',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'BEGIN
    INSERT INTO ARTISTS(NAME, DESCRIPTION, BIO)
    VALUES (:name, :description, :bio)
    RETURNING ARTIST_ID INTO :artist_id;
    :status_code:= 201;
    :pv_result := ''Artists Added'';
    :pn_status := ''SUCCESS'';
    EXCEPTION 
        WHEN OTHERS THEN 
        :status_code:= 400;
        :artist_id := -1;
        :pv_result := ''UNABLE TO ADD ARTIST'' || SQLERRM;
        :pn_status := ''ERROR'';
    END;
        ');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'artists',
      p_method             => 'POST',
      p_name               => 'STATUS_CODE',
      p_bind_variable_name => 'pn_status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response status');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'artists',
      p_method             => 'POST',
      p_name               => 'RESULT_MESSAGE',
      p_bind_variable_name => 'pv_result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response message');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'artists',
      p_method             => 'POST',
      p_name               => 'OBJECT_ID',
      p_bind_variable_name => 'artist_id',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => 'The artist id of the created artist');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'artists',
      p_method             => 'POST',
      p_name               => 'NAME',
      p_bind_variable_name => 'name',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => 'artist_name');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'artists',
      p_method             => 'POST',
      p_name               => 'DESCRIPTION',
      p_bind_variable_name => 'description',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => 'artist bio');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'artists',
      p_method             => 'POST',
      p_name               => 'BIO',
      p_bind_variable_name => 'bio',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => 'artist bio');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.adminuser.v1',
      p_pattern        => 'artists',
      p_method         => 'PUT',
      p_source_type    => 'plsql/block',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'BEGIN
          UPDATE ARTISTS A
          SET NAME = nvl(:name, A.NAME), BIO = nvl(:bio, A.BIO)
          WHERE A.ARTIST_ID = :id;
          :status_code:= 201;
          :pv_result := ''Artists Updated'';
          :pn_status := ''SUCCESS'';
          EXCEPTION 
              WHEN OTHERS THEN 
              :status_code:= 400;
              :pv_result := ''UNABLE TO UPDATE ARTIST'' || SQLERRM;
              :pn_status := ''ERROR'';
          END;
          ');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'artists',
      p_method             => 'PUT',
      p_name               => 'STATUS_CODE',
      p_bind_variable_name => 'pn_status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response status');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'artists',
      p_method             => 'PUT',
      p_name               => 'RESULT_MESSAGE',
      p_bind_variable_name => 'pv_result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response message');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'artists',
      p_method             => 'PUT',
      p_name               => 'ARTIST_ID',
      p_bind_variable_name => 'artist_id',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'IN',
      p_comments           => 'artist_id');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'artists',
      p_method             => 'PUT',
      p_name               => 'ARTIST_NAME ',
      p_bind_variable_name => 'artist_name',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => 'artist_name');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'artists',
      p_method             => 'PUT',
      p_name               => 'BIO',
      p_bind_variable_name => 'bio',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => 'artist bio');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.adminuser.v1',
      p_pattern        => 'artists',
      p_method         => 'DELETE',
      p_source_type    => 'plsql/block',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'BEGIN
      DELETE FROM ARTISTS
      WHERE ARTIST_ID = :id;

      IF SQL%ROWCOUNT = 0 THEN
          :status_code:= 404;
          :pv_result := ''Invalid artist id'';
          :pn_status := ''NO_MATCH'';
      ELSE
          :status_code:= 200;
          :pv_result := ''Artist Deleted'';
          :pn_status := ''SUCCESS'';
      END IF;

      EXCEPTION 
          WHEN OTHERS THEN 
          :status_code:= 400;
          :pv_result := ''UNABLE TO DELETE ARTIST'' || SQLERRM;
          :pn_status := ''ERROR'';
    END;
        ');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'artists',
      p_method             => 'DELETE',
      p_name               => 'STATUS_CODE',
      p_bind_variable_name => 'pn_status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response status');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'artists',
      p_method             => 'DELETE',
      p_name               => 'RESULT_MESSAGE',
      p_bind_variable_name => 'pv_result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response message');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'artists',
      p_method             => 'DELETE',
      p_name               => 'ARTIST_ID',
      p_bind_variable_name => 'artist_id',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'IN',
      p_comments           => 'artist_id');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.adminuser.v1',
      p_pattern        => 'venues',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'Venues resource for admins');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.adminuser.v1',
      p_pattern        => 'venues',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'BEGIN
      INSERT INTO VENUES(NAME, LOCATION, CITY_ID)
      VALUES (:name, :location, :city_id)
      RETURNING VENUE_ID INTO :venue_id; 
      :status_code:= 201;
      :pv_result := ''Venue Added'';
      :pn_status := ''SUCCESS'';
      EXCEPTION 
          WHEN OTHERS THEN 
          :status_code:= 400;
          :pv_result := ''UNABLE TO ADD VENUE'' || SQLERRM;
          :pn_status := ''ERROR'';
      END;
          ');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'venues',
      p_method             => 'POST',
      p_name               => 'STATUS_CODE',
      p_bind_variable_name => 'pn_status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response status');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'venues',
      p_method             => 'POST',
      p_name               => 'RESULT_MESSAGE',
      p_bind_variable_name => 'pv_result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response message');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'venues',
      p_method             => 'POST',
      p_name               => 'OBJECT_ID',
      p_bind_variable_name => 'venue_id',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => 'The venue id of the created venue.');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'venues',
      p_method             => 'POST',
      p_name               => 'VENUE_NAME ',
      p_bind_variable_name => 'name',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => 'name of the venue');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'venues',
      p_method             => 'POST',
      p_name               => 'VENUE_LOCATION ',
      p_bind_variable_name => 'location',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => 'venue location');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'venues',
      p_method             => 'POST',
      p_name               => 'CITY_ID ',
      p_bind_variable_name => 'city_id',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'IN',
      p_comments           => 'City ID of the venue.');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.adminuser.v1',
      p_pattern        => 'venues',
      p_method         => 'PUT',
      p_source_type    => 'plsql/block',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'BEGIN
      UPDATE VENUES V
      SET NAME = nvl(:name, V.NAME), LOCATION = nvl(:location, V.LOCATION)
      WHERE V.ID = :id;
      :status_code:= 201;
      :pv_result := ''VENUE Updated'';
      :pn_status := ''SUCCESS'';
      EXCEPTION 
          WHEN OTHERS THEN 
          :status_code:= 400;
          :pv_result := ''UNABLE TO UPDATE VENUE'' || SQLERRM;
          :pn_status := ''ERROR'';
      END;
          ');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'venues',
      p_method             => 'PUT',
      p_name               => 'STATUS_CODE',
      p_bind_variable_name => 'pn_status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response status');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'venues',
      p_method             => 'PUT',
      p_name               => 'RESULT_MESSAGE',
      p_bind_variable_name => 'pv_result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response message');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'venues',
      p_method             => 'PUT',
      p_name               => 'VENUE_ID ',
      p_bind_variable_name => 'id',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'IN',
      p_comments           => 'venue id');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'venues',
      p_method             => 'PUT',
      p_name               => 'VENUE_NAME ',
      p_bind_variable_name => 'name',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => 'name of the venue');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'venues',
      p_method             => 'PUT',
      p_name               => 'VENUE_LOCATION ',
      p_bind_variable_name => 'location',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => 'venue location');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.adminuser.v1',
      p_pattern        => 'venues',
      p_method         => 'DELETE',
      p_source_type    => 'plsql/block',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'BEGIN
      DELETE FROM VENUES
      WHERE VENUE_ID = :id;

      IF SQL%ROWCOUNT = 0 THEN
          :status_code:= 404;
          :pv_result := ''Invalid venue id'';
          :pn_status := ''NO_MATCH'';
      ELSE
          :status_code:= 200;
          :pv_result := ''Venue Deleted'';
          :pn_status := ''SUCCESS'';
      END IF;

      EXCEPTION 
          WHEN OTHERS THEN 
          :status_code:= 400;
          :pv_result := ''UNABLE TO DELETE ARTIST'' || SQLERRM;
          :pn_status := ''ERROR'';
      END;
          ');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'venues',
      p_method             => 'DELETE',
      p_name               => 'STATUS_CODE',
      p_bind_variable_name => 'pn_status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response status');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'venues',
      p_method             => 'DELETE',
      p_name               => 'RESULT_MESSAGE',
      p_bind_variable_name => 'pv_result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response message');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'venues',
      p_method             => 'DELETE',
      p_name               => 'VENUE_ID ',
      p_bind_variable_name => 'id',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => 'venue_id');

  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'concert_app.adminuser.v1',
      p_pattern        => 'events',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => 'Events resource for admins');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.adminuser.v1',
      p_pattern        => 'events',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'BEGIN
      INSERT INTO EVENTS(EVENT_DATE, ARTIST_ID, VENUE_ID, EVENT_STATUS_ID, EVENT_DETAILS)
      VALUES (TO_DATE(:e_date, ''YYYY-MM-DD''),
      :artist_id, :venue_id, :event_status_id, :event_details)
      RETURNING EVENT_ID INTO :event_id; 
      :status_code:= 201;
      :pv_result := ''Event Added'';
      :pn_status := ''SUCCESS'';
      EXCEPTION 
          WHEN OTHERS THEN 
          :status_code:= 400;
          :pv_result := ''UNABLE TO ADD EVENT'' || SQLERRM;
          :pn_status := ''ERROR'';
      END;
          ');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'events',
      p_method             => 'POST',
      p_name               => 'STATUS_CODE',
      p_bind_variable_name => 'pn_status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response status');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'events',
      p_method             => 'POST',
      p_name               => 'RESULT_MESSAGE',
      p_bind_variable_name => 'pv_result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response message');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'events',
      p_method             => 'POST',
      p_name               => 'OBJECT_ID',
      p_bind_variable_name => 'event_id',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'INT',
      p_access_method      => 'OUT',
      p_comments           => 'The event id of the created event.');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'events',
      p_method             => 'POST',
      p_name               => 'EVENT_DATE ',
      p_bind_variable_name => 'e_date',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => 'date of event');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'events',
      p_method             => 'POST',
      p_name               => 'ARTIST_ID ',
      p_bind_variable_name => 'artist_id',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'IN',
      p_comments           => 'artist id');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'events',
      p_method             => 'POST',
      p_name               => 'VENUE_ID ',
      p_bind_variable_name => 'venue_id',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'IN',
      p_comments           => 'venue id');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'events',
      p_method             => 'POST',
      p_name               => 'EVENT_STATUS_ID ',
      p_bind_variable_name => 'event_status_id',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'IN',
      p_comments           => 'status of the event');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'events',
      p_method             => 'POST',
      p_name               => 'EVENT_DETAILS',
      p_bind_variable_name => 'event_details',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => 'event_details');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.adminuser.v1',
      p_pattern        => 'events',
      p_method         => 'PUT',
      p_source_type    => 'plsql/block',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'BEGIN
      UPDATE EVENTS E
      SET 
      E_DATE = nvl(TO_DATE(:e_date, ''YYYY-MM-DDTHH:mm:ss.SSSZ''), E.EVENT_DATE), 
      ARTIST_ID = nvl(:artist_id, E.ARTIST_ID),
      VENUE_ID = nvl(:venue_id, E.VENUE_ID),
      EVENT_STATUS_ID = nvl(:event_status_id, E.EVENT_STATUS_ID),
      EVENT_DETAILS = nvl(:event_details, E.EVENT_DETAILS),
      WHERE E.ID = :id;
      :status_code:= 201;
      :pv_result := ''Event Updated'';
      :pn_status := ''SUCCESS'';
      EXCEPTION 
          WHEN OTHERS THEN 
          :status_code:= 400;
          :pv_result := ''UNABLE TO UPDATE EVENT'' || SQLERRM;
          :pn_status := ''ERROR'';
      END;
          ');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'events',
      p_method             => 'PUT',
      p_name               => 'STATUS_CODE',
      p_bind_variable_name => 'pn_status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response status');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'events',
      p_method             => 'PUT',
      p_name               => 'RESULT_MESSAGE',
      p_bind_variable_name => 'pv_result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response message');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'events',
      p_method             => 'PUT',
      p_name               => 'EVENT_ID ',
      p_bind_variable_name => 'event_id',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => 'event id');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'events',
      p_method             => 'PUT',
      p_name               => 'EVENT_DATE ',
      p_bind_variable_name => 'e_date',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => 'date of event');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'events',
      p_method             => 'PUT',
      p_name               => 'ARTIST_ID ',
      p_bind_variable_name => 'artist_id',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'IN',
      p_comments           => 'artist id');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'events',
      p_method             => 'PUT',
      p_name               => 'VENUE_ID ',
      p_bind_variable_name => 'venue_id',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'IN',
      p_comments           => 'venue id');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'events',
      p_method             => 'PUT',
      p_name               => 'EVENT_STATUS_ID ',
      p_bind_variable_name => 'event_status_id',
      p_source_type        => 'HEADER',
      p_param_type         => 'INT',
      p_access_method      => 'IN',
      p_comments           => 'status of the event');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'events',
      p_method             => 'PUT',
      p_name               => 'EVENT_DETAILS',
      p_bind_variable_name => 'event_details',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => 'event_details');

  ORDS.DEFINE_HANDLER(
      p_module_name    => 'concert_app.adminuser.v1',
      p_pattern        => 'events',
      p_method         => 'DELETE',
      p_source_type    => 'plsql/block',
      p_items_per_page => 10,
      p_mimes_allowed  => NULL,
      p_comments       => NULL,
      p_source         => 
'BEGIN
      DELETE FROM EVENTS
      WHERE EVENT_ID = :id;

      IF SQL%ROWCOUNT = 0 THEN
          :status_code:= 404;
          :pv_result := ''Invalid event id'';
          :pn_status := ''NO_MATCH'';
      ELSE
          :status_code:= 200;
          :pv_result := ''Event Deleted'';
          :pn_status := ''SUCCESS'';
      END IF;

      EXCEPTION 
          WHEN OTHERS THEN 
          :status_code:= 400;
          :pv_result := ''UNABLE TO DELETE ARTIST'' || SQLERRM;
          :pn_status := ''ERROR'';
      END;
          ');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'events',
      p_method             => 'DELETE',
      p_name               => 'STATUS_CODE',
      p_bind_variable_name => 'pn_status',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response status');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'events',
      p_method             => 'DELETE',
      p_name               => 'RESULT_MESSAGE',
      p_bind_variable_name => 'pv_result',
      p_source_type        => 'RESPONSE',
      p_param_type         => 'STRING',
      p_access_method      => 'OUT',
      p_comments           => 'Response message');

  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'concert_app.adminuser.v1',
      p_pattern            => 'events',
      p_method             => 'DELETE',
      p_name               => 'EVENT_ID ',
      p_bind_variable_name => 'event_id',
      p_source_type        => 'HEADER',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => 'event id');

    
  ORDS.CREATE_ROLE(p_role_name => 'oracle.dbtools.role.autorest.CONCERT_SAMPLE_APP');
  ORDS.CREATE_ROLE(p_role_name => 'oracle.dbtools.role.autorest.CONCERT_SAMPLE_APP.SEARCH_ARTIST_VIEW');
  ORDS.CREATE_ROLE(p_role_name => 'oracle.dbtools.role.autorest.CONCERT_SAMPLE_APP.SEARCH_VENUES_VIEW');
  ORDS.CREATE_ROLE(p_role_name => 'oracle.dbtools.role.autorest.CONCERT_SAMPLE_APP.SEARCH_VIEW');
    
  l_modules(1) := 'concert_app.adminuser.v1';

  ORDS.DEFINE_PRIVILEGE(
      p_privilege_name => 'concert_app_admin',
      p_roles          => l_roles,
      p_patterns       => l_patterns,
      p_modules        => l_modules,
      p_label          => 'Admin user privilege',
      p_description    => 'Provides access to the concert app admin endpoints',
      p_comments       => NULL); 

  l_roles.DELETE;
  l_modules.DELETE;
  l_patterns.DELETE;
    
  l_modules(1) := 'concert_app.authuser.v1';

  ORDS.DEFINE_PRIVILEGE(
      p_privilege_name => 'concert_app_authuser',
      p_roles          => l_roles,
      p_patterns       => l_patterns,
      p_modules        => l_modules,
      p_label          => 'authenticated end user privilege',
      p_description    => 'Provides access to the user specific endpoints',
      p_comments       => NULL); 

  l_roles.DELETE;
  l_modules.DELETE;
  l_patterns.DELETE;
    
  l_modules(1) := 'concert_app.euser.v1';

  ORDS.DEFINE_PRIVILEGE(
      p_privilege_name => 'concert_app_euser',
      p_roles          => l_roles,
      p_patterns       => l_patterns,
      p_modules        => l_modules,
      p_label          => 'Non authenticated end user privilege',
      p_description    => 'Provides limited access to the concert app endpoints',
      p_comments       => NULL); 

  l_roles.DELETE;
  l_modules.DELETE;
  l_patterns.DELETE;
    
  l_roles(1) := 'oracle.dbtools.autorest.any.schema';
  l_roles(2) := 'oracle.dbtools.role.autorest.CONCERT_SAMPLE_APP';

  ORDS.DEFINE_PRIVILEGE(
      p_privilege_name => 'oracle.dbtools.autorest.privilege.CONCERT_SAMPLE_APP',
      p_roles          => l_roles,
      p_patterns       => l_patterns,
      p_modules        => l_modules,
      p_label          => 'CONCERT_SAMPLE_APP metadata-catalog access',
      p_description    => 'Provides access to the metadata catalog of the objects in the CONCERT_SAMPLE_APP schema.',
      p_comments       => NULL); 

  l_roles.DELETE;
  l_modules.DELETE;
  l_patterns.DELETE;
    
  l_roles(1) := 'SQL Developer';
  l_roles(2) := 'oracle.dbtools.autorest.any.schema';
  l_roles(3) := 'oracle.dbtools.role.autorest.CONCERT_SAMPLE_APP.SEARCH_ARTIST_VIEW';
  l_patterns(1) := '/metadata-catalog/search_artist_view/*';
  l_patterns(2) := '/search_artist_view/*';

  ORDS.DEFINE_PRIVILEGE(
      p_privilege_name => 'oracle.dbtools.autorest.privilege.CONCERT_SAMPLE_APP.SEARCH_ARTIST_VIEW',
      p_roles          => l_roles,
      p_patterns       => l_patterns,
      p_modules        => l_modules,
      p_label          => 'autorest_CONCERT_SAMPLE_APP_SEARCH_ARTIST_VIEW',
      p_description    => 'allow access to autoREST API',
      p_comments       => NULL); 

  l_roles.DELETE;
  l_modules.DELETE;
  l_patterns.DELETE;
    
  l_roles(1) := 'SQL Developer';
  l_roles(2) := 'oracle.dbtools.autorest.any.schema';
  l_roles(3) := 'oracle.dbtools.role.autorest.CONCERT_SAMPLE_APP.SEARCH_VENUES_VIEW';
  l_patterns(1) := '/metadata-catalog/search_venues_view/*';
  l_patterns(2) := '/search_venues_view/*';

  ORDS.DEFINE_PRIVILEGE(
      p_privilege_name => 'oracle.dbtools.autorest.privilege.CONCERT_SAMPLE_APP.SEARCH_VENUES_VIEW',
      p_roles          => l_roles,
      p_patterns       => l_patterns,
      p_modules        => l_modules,
      p_label          => 'autorest_CONCERT_SAMPLE_APP_SEARCH_VENUES_VIEW',
      p_description    => 'allow access to autoREST API',
      p_comments       => NULL); 

  l_roles.DELETE;
  l_modules.DELETE;
  l_patterns.DELETE;
    
  l_roles(1) := 'SQL Developer';
  l_roles(2) := 'oracle.dbtools.autorest.any.schema';
  l_roles(3) := 'oracle.dbtools.role.autorest.CONCERT_SAMPLE_APP.SEARCH_VIEW';
  l_patterns(1) := '/metadata-catalog/search_view/*';
  l_patterns(2) := '/search_view/*';

  ORDS.DEFINE_PRIVILEGE(
      p_privilege_name => 'oracle.dbtools.autorest.privilege.CONCERT_SAMPLE_APP.SEARCH_VIEW',
      p_roles          => l_roles,
      p_patterns       => l_patterns,
      p_modules        => l_modules,
      p_label          => 'autorest_CONCERT_SAMPLE_APP_SEARCH_VIEW',
      p_description    => 'allow access to autoREST API',
      p_comments       => NULL); 

  l_roles.DELETE;
  l_modules.DELETE;
  l_patterns.DELETE;
    
  l_roles(1) := 'SODA Developer';
  l_patterns(1) := '/soda/*';

  ORDS.DEFINE_PRIVILEGE(
      p_privilege_name => 'oracle.soda.privilege.developer',
      p_roles          => l_roles,
      p_patterns       => l_patterns,
      p_modules        => l_modules,
      p_label          => NULL,
      p_description    => NULL,
      p_comments       => NULL); 

  l_roles.DELETE;
  l_modules.DELETE;
  l_patterns.DELETE;
    
  ORDS_METADATA.ORDS.ENABLE_OBJECT(
      p_enabled => TRUE, 
      p_schema => 'CONCERT_SAMPLE_APP',
      p_object => 'SEARCH_VIEW',
      p_object_type => 'VIEW',
      p_object_alias => 'search_view',
      p_auto_rest_auth => TRUE);

  ORDS_METADATA.ORDS.ENABLE_OBJECT(
      p_enabled => TRUE, 
      p_schema => 'CONCERT_SAMPLE_APP',
      p_object => 'SEARCH_ARTIST_VIEW',
      p_object_type => 'VIEW',
      p_object_alias => 'search_artist_view',
      p_auto_rest_auth => TRUE);

  ORDS_METADATA.ORDS.ENABLE_OBJECT(
      p_enabled => TRUE, 
      p_schema => 'CONCERT_SAMPLE_APP',
      p_object => 'SEARCH_VENUES_VIEW',
      p_object_type => 'VIEW',
      p_object_alias => 'search_venues_view',
      p_auto_rest_auth => TRUE);

          
COMMIT;

END;